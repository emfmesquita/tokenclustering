/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ClusteringAreaPanel.java
 *
 * Created on 09/06/2010, 23:45:30
 */
package tokenclustering.view;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import tokenclustering.model.Token;

/**
 *
 * @author Edson
 */
public class ClusteringAreaPanel extends javax.swing.JPanel {

    /** Creates new form ClusteringAreaPanel */
    public ClusteringAreaPanel() {
        initComponents();
        zoom = INIT_ZOOM;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setOpaque(false);
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
    }// </editor-fold>//GEN-END:initComponents

    public void newTokenArea(int width, int height) {
        if (tokenClusterImage != null) {
            tokenClusterImage = null;
            this.paint(this.getGraphics().create());
        }
        if (toSaveImage != null) {
            toSaveImage = null;
        }
        this.height = height;
        this.width = width;
        this.removeAll();
        this.updateUI();
        zoom = INIT_ZOOM;
        tokenClusterImage = new BufferedImage((int) (width * zoom), (int) (height * zoom), BufferedImage.TYPE_INT_RGB);
        toSaveImage = new BufferedImage((int) (width * SAVE_ZOOM), (int) (height * SAVE_ZOOM), BufferedImage.TYPE_INT_RGB);
        Graphics2D g2 = (Graphics2D) tokenClusterImage.createGraphics();
        Graphics2D g2Save = (Graphics2D) toSaveImage.createGraphics();

        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                Rectangle rect = new Rectangle(new Point(1 + (int) (j * zoom), 1 + (int) (i * zoom)), new Dimension((int) (zoom) - 3, (int) (zoom) - 3));
                g2.draw(rect);
                Rectangle rectSave = new Rectangle(new Point(1 + (int) (j * SAVE_ZOOM), 1 + (int) (i * SAVE_ZOOM)), new Dimension((int) (SAVE_ZOOM) - 3, (int) (SAVE_ZOOM) - 3));
                g2Save.draw(rectSave);
            }
        }
        this.setMinimumSize(new Dimension(10 + (int) (width * zoom), 10 + (int) (height * zoom)));
        this.setPreferredSize(new Dimension(10 + (int) (width * zoom), 10 + (int) (height * zoom)));
        this.repaint();
    }

    public void clear(int x, int y, int width, int height) {
        if (x + width < this.width && y + height < this.height) {
            BufferedImage aux = new BufferedImage((int) (width * zoom), (int) (height * zoom), BufferedImage.TYPE_INT_RGB);
            BufferedImage auxSave = new BufferedImage((int) (width * SAVE_ZOOM), (int) (height * SAVE_ZOOM), BufferedImage.TYPE_INT_RGB);
            Graphics2D g2 = (Graphics2D) tokenClusterImage.getGraphics();
            Graphics2D g2Save = (Graphics2D) toSaveImage.getGraphics();
            Graphics2D g2Aux = (Graphics2D) aux.getGraphics();
            Graphics2D g2AuxSave = (Graphics2D) auxSave.getGraphics();
            for (int i = 0; i < height; i++) {
                for (int j = 0; j < width; j++) {
                    Rectangle rect = new Rectangle(new Point(1 + (int) (j * zoom), 1 + (int) (i * zoom)), new Dimension((int) (zoom) - 3, (int) (zoom) - 3));
                    Rectangle rectSave = new Rectangle(new Point(1 + (int) (j * SAVE_ZOOM), 1 + (int) (i * SAVE_ZOOM)), new Dimension((int) (SAVE_ZOOM) - 3, (int) (SAVE_ZOOM) - 3));
                    g2Aux.draw(rect);
                    g2AuxSave.draw(rectSave);
                }
            }
            g2.drawImage(aux, (int) (x * zoom), (int) (y * zoom), this);
            g2.drawImage(auxSave, (int) (x * SAVE_ZOOM), (int) (y * SAVE_ZOOM), this);
        }
    }

    public void putToken(Token token) throws IOException {
        int tokenWidth = token.getWidth();
        int tokenHeight = token.getHeight();
        
        File imageFile = Token.getTokenFile(token);

        if (imageFile != null && imageFile.exists()) {
            BufferedImage iBufferedImage = ImageIO.read(imageFile);
            Image iImage = iBufferedImage.getScaledInstance((int) (tokenWidth * zoom), (int) (tokenHeight * zoom), Image.SCALE_SMOOTH);
            Image iImageSave = iBufferedImage.getScaledInstance((int) (tokenWidth * SAVE_ZOOM), (int) (tokenHeight * SAVE_ZOOM), Image.SCALE_SMOOTH);
            Graphics2D g2 = (Graphics2D) tokenClusterImage.getGraphics();
            Graphics2D g2Save = (Graphics2D) toSaveImage.getGraphics();
            g2.drawImage(iImage, (int) (token.getUpperLeftSlot().getX() * zoom),
                    (int) (token.getUpperLeftSlot().getY() * zoom), this);
            g2Save.drawImage(iImageSave, (int) (token.getUpperLeftSlot().getX() * SAVE_ZOOM),
                    (int) (token.getUpperLeftSlot().getY() * SAVE_ZOOM), this);
        }
        this.repaint();
        this.updateUI();
    }

    public void saveImage(File file) throws IOException {
        if (ImageFilter.getExtension(file) != null) {
            file.createNewFile();
            ImageIO.write(toSaveImage, ImageFilter.getExtension(file), file);
        }
    }

    public void zoomIn() {
        if (zoom >= 128) {
            return;
        }
        zoom *= 1.2f;
        if (zoom > 128) {
            zoom = 128;
        }
        redraw();
    }

    public void zoomOut() {
        if (zoom <= 32) {
            return;
        }
        zoom *= 0.8f;
        if (zoom < 32) {
            zoom = 32;
        }
        redraw();
    }

    public void redraw() {
        tokenClusterImage = new BufferedImage((int) (width * zoom), (int) (height * zoom), BufferedImage.TYPE_INT_RGB);
        Image aux = toSaveImage.getScaledInstance((int) (width * zoom), (int) (height * zoom), Image.SCALE_DEFAULT);
        Graphics2D g2 = (Graphics2D) tokenClusterImage.getGraphics();
        g2.drawImage(aux, 0, 0, this);
        this.setMinimumSize(new Dimension(10 + (int) (width * zoom), 10 + (int) (height * zoom)));
        this.setPreferredSize(new Dimension(10 + (int) (width * zoom), 10 + (int) (height * zoom)));
        repaint();
        this.updateUI();
    }

    @Override
    public void paint(Graphics g) {
        if (this.tokenClusterImage != null) {
            Graphics2D g2 = (Graphics2D) g;
            g2.drawImage(tokenClusterImage, 5, 5, this);
        } else {
            super.paint(g);
        }
    }
    private int width;
    private int height;
    private final float INIT_ZOOM = 64;
    private final float SAVE_ZOOM = 128;
    private float zoom;
    private BufferedImage tokenClusterImage;
    private BufferedImage toSaveImage;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
