/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PreviewPanel.java
 *
 * Created on 11/06/2010, 02:42:47
 */
package tokenclustering.view;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import tokenclustering.model.Token;

/**
 *
 * @author Edson
 */
public class PreviewPanel extends javax.swing.JPanel {

    /** Creates new form PreviewPanel */
    public PreviewPanel() {
        initComponents();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 95, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 91, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void setToken(Token token) {
        File imageFile = Token.getTokenFile(token);
        
        int tokenWidth = token.getWidth();
        int tokenHeight = token.getHeight();
        
        int scaledWidth = (int) (tokenWidth * ZOOM);
        int scaledHeight = (int) (tokenHeight * ZOOM);

        if (imageFile != null && imageFile.exists()) {
            try {
                BufferedImage iBufferedImage = ImageIO.read(imageFile);
                
                
                Image iImage = iBufferedImage.getScaledInstance(scaledWidth, scaledHeight, Image.SCALE_SMOOTH);
                tokenPreview = new BufferedImage(scaledWidth, scaledHeight, BufferedImage.TYPE_INT_RGB);
                Graphics2D g2 = (Graphics2D) tokenPreview.getGraphics();
                g2.drawImage(iImage, 0, 0, this);
            } catch (IOException ex) {
                Logger.getLogger(ClusteringAreaPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        this.setMinimumSize(new Dimension(scaledWidth + 10, scaledHeight + 10));
        this.setPreferredSize(new Dimension(scaledWidth + 10, scaledHeight + 10));
        this.repaint();
        this.updateUI();
    }

    @Override
    public void paint(Graphics g) {
        if (this.tokenPreview != null) {
            Graphics2D g2 = (Graphics2D) g;
            g2.drawImage(tokenPreview, 3, 3, this);
        } else {
            super.paint(g);
        }
    }
    private final int ZOOM = 64;
    private BufferedImage tokenPreview;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
